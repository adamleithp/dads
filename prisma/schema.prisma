// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  friendsAsUser1 Friendship[] @relation("User1Friendship") // Relation to friendships where the user is `user1`
  friendsAsUser2 Friendship[] @relation("User2Friendship") // Relation to friendships where the user is `user2`
  groups    GroupMember[]
  events    Event[]
  messages  Message[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}


model Friendship {
  id        String  @id @default(uuid())
  user1     User    @relation("User1Friendship", fields: [user1Id], references: [id])
  user1Id   String
  user2     User    @relation("User2Friendship", fields: [user2Id], references: [id])
  user2Id   String
  status    FriendshipStatus
  messages  Message[]      // Messages sent within this friendship
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Group {
  id        String        @id @default(uuid())
  name      String
  members   GroupMember[]
  events    Event[]
  messages  Message[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model GroupMember {
  id        String @id @default(uuid())
  group     Group  @relation(fields: [groupId], references: [id])
  groupId   String
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Event {
  id        String   @id @default(uuid())
  title     String
  date      DateTime
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id          String   @id @default(uuid())
  content     String
  sender      User     @relation(fields: [senderId], references: [id])
  senderId    String
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     String?
  friendship  Friendship? @relation(fields: [friendshipId], references: [id])
  friendshipId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
